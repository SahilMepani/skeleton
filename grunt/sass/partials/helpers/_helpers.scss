/*=====================================
=            Miscellaneous            =
=====================================*/
.btn-load-more-block {

}

.btn-load-more {
  &.js-active {
    opacity: 1;
  }
  &.js-disabled {
    cursor: default;
    pointer-events: none;
    opacity: .3;
  }
  &.js-change {
    background-color: blue !important;
  }
}

.flex-vertical-center {
  //when used on rows with bootstrap col, generates a bug on iphone 6s+, so used for above small breakpoints only
  @include breakpoint( $sm ) {
    @include display-flex;
    @include flex-wrap( wrap );
    @include align-items( center );
  }
}

.list-unstyled {
  @include list-unstyled;
}

.limit-content {
  @include rem(max-width, 1000px);
  margin: 0 auto;
}

.max-width-none {
  max-width: none;
}


/*===================================
=            Backgrounds            =
===================================*/
.bg-cover {
  @include bg-cover;
}

.bg-grey {
  background-color: #ddd;
}

.bg-overlay-black {
  position: relative;
  * {
    color: #fff;
  }
  &:before {
    content: '';
    background-color: rgba(0,0,0,.5);
    display: block;
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
  }
}

/*==============================
=            Images            =
==============================*/
.img-responsive {
  width: auto;
  height: auto;
}

.img-limit-block-xs-2 {
  @include breakpoint( $xs ) {
    img {
      max-height: 200px;
    }
  }
}

.img-limit-block-xs-3 {
  @include breakpoint( $xs ) {
    img {
      max-height: 200px;
    }
  }
}

/*================================
=            Position            =
================================*/
.static { position: static; }
.relative { position: relative; }
.fixed { position: fixed; }
.absolute { position: absolute; }


/*==================================
=            Icon Fonts            =
==================================*/
.i-font-before {
  &:before {
    @include icon-font-properties;
  }
}
.i-font-after {
  &:after {
    @include icon-font-properties;
  }
}


/*==================================
=            Text/Fonts            =
==================================*/
.color-primary { color: $brand_color_primary !important; }
.color-secondary { color: $brand_color_secondary !important; }
.colo-base { color: $base_color; }
.text-center { text-align: center; }
.text-center-xs {
  @include breakpoint( $xs ) {
    text-align: center;
  }
}
.text-center-sm {
  @include breakpoint( $sm ) {
    text-align: center;
  }
}
.text-left { text-align: left; }
.text-right { text-align: right; }
.text-justify { text-align: justify; }
.text-truncate { @include text-truncate; }
.text-underline { text-decoration: underline; }
.lead, .big { font-size: $base_font_size + 4; }
.small { @extend small; }
.light { font-weight: 300; }
.regular { font-weight: 400; }
.semi-bold { font-weight: 600; }
.bold { font-weight: 700; }
.caps { text-transform: uppercase; }
.capitalize { text-transform: capitalize; }


/*=============================
=            Float            =
=============================*/
.pull-left { float: left !important; }
.pull-right { float: right !important; }
.align-left, .alignleft {
  float: left;
  margin: 0 25px 10px 0;
}
.align-right, .alignright {
  float: right;
  margin: 0 0 10px 25px;
}
.align-center, .aligncenter {
  clear: both;
  display: block;
  margin: 0 auto $global_margin_bottom auto;
}
/* img.align-left, img.alignleft, img.align-right, img.alignright, img.align-center, img.aligncenter {} */


/*===============================
=            Display            =
===============================*/
.inline { display: inline; }
.inline-block { display: inline-block; }
.block, .show { display: block !important; }
.hidden, .hide { display: none !important; }
.visible { visibility: visible !important; }
.invisible { visibility: hidden !important; }
.flex { @include display-flex; }
.flex-xs {
  @include breakpoint( $xs ) {
    @include display-flex;
  }
}
.flex-sm {
  @include breakpoint( $sm ) {
    @include display-flex;
  }
}
.flex-md {
  @include breakpoint( $md ) {
    @include display-flex;
  }
}
.flex-lg {
  @include breakpoint( $lg ) {
    @include display-flex;
  }
}


/*=============================
=            Clear            =
=============================*/
.clearfix { @include clearfix; }
.clear { clear: both !important; }
.clear-left { clear: left !important; }
.clear-right { clear: right !important; }


/*======================================
=            Padding/Margin            =
======================================*/
.padding-0 {
  padding-top: 0 ;
  padding-bottom: 0 ;
}
.padding-top-0 { padding-top: 0 ; }
.padding-bottom-0 { padding-bottom: 0 ; }
.margin-0 {
  margin: 0 !important;
}
.margin-top-0 { margin-top: 0 !important; }
.margin-bottom-0 { margin-bottom: 0 !important; }

@for $i from 1 through length($ar_gutter) {
  .padding-#{$i} {
    padding-top: nth( $ar_gutter, $i );
    padding-bottom: nth( $ar_gutter, $i );
  }
  .padding-top-#{$i} {
    padding-top: nth( $ar_gutter, $i );
  }
  .padding-bottom-#{$i} {
    padding-bottom: nth( $ar_gutter, $i );
  }
  .margin-#{$i} {
    margin: nth( $ar_gutter, $i ) !important;
    margin: nth( $ar_gutter, $i ) !important;
  }
  .margin-top-#{$i} {
    margin-top: nth( $ar_gutter, $i ) !important;
  }
  .margin-bottom-#{$i} {
    margin-bottom: nth( $ar_gutter, $i ) !important;
  }
}

/* Change higher paddings small on mobile */
@include breakpoint( $xs ) {
  @for $i from 4 through length($ar_gutter) {
    .padding-#{$i} {
      padding-top: 50px;
      padding-bottom: 50px;
    }
    .padding-top-#{$i} {
      padding-top: 50px;
    }
    .padding-bottom-#{$i} {
      padding-bottom: 50px;
    }
    .margin-#{$i} {
      margin: 50px !important;
      margin: 50px !important;
    }
    .margin-top-#{$i} {
      margin-top: 50px !important;
    }
    .margin-bottom-#{$i} {
      margin-bottom: 50px !important;
    }
  }
}

/* MQ classes */
@for $counter from 1 through length($ar_bp) {
  @include breakpoint( nth($ar_bp, $counter) ) {
    @for $i from 1 through length($ar_gutter) {
      .padding-#{nth($ar_bp_classes, $counter)}-#{$i} {
        padding-top: nth( $ar_gutter, $i );
        padding-bottom: nth( $ar_gutter, $i );
      }
      .padding-top-#{nth($ar_bp_classes, $counter)}-#{$i} {
        padding-top: nth( $ar_gutter, $i );
      }
      .padding-bottom-#{nth($ar_bp_classes, $counter)}-#{$i} {
        padding-bottom: nth( $ar_gutter, $i );
      }
      .margin-#{nth($ar_bp_classes, $counter)}-#{$i} {
        margin: nth( $ar_gutter, $i ) !important;
        margin: nth( $ar_gutter, $i ) !important;
      }
      .margin-top-#{nth($ar_bp_classes, $counter)}-#{$i} {
        margin-top: nth( $ar_gutter, $i ) !important;
      }
      .margin-bottom-#{nth($ar_bp_classes, $counter)}-#{$i} {
        margin-bottom: nth( $ar_gutter, $i ) !important;
      }
    }
  }
}

@for $counter from 1 through length($ar_bp) {
  @include breakpoint( nth($ar_bp, $counter) ) {
    .padding-#{nth($ar_bp_classes, $counter)}-0 {
      padding-top: 0;
      padding-bottom: 0;
    }
    .padding-top-#{nth($ar_bp_classes, $counter)}-0 {
      padding-top: 0;
    }
    .padding-bottom-#{nth($ar_bp_classes, $counter)}-0 {
      padding-bottom: 0;
    }
    .margin-#{nth($ar_bp_classes, $counter)}-0 {
      margin: 0 !important;
      margin: 0 !important;
    }
    .margin-top-#{nth($ar_bp_classes, $counter)}-0 {
      margin-top: 0 !important;
    }
    .margin-bottom-#{nth($ar_bp_classes, $counter)}-0 {
      margin-bottom: 0 !important;
    }
  }
}


/*===========================
=            WOW            =
===========================*/
.wow {
  visibility: hidden;
  @include breakpoint( $xs_max, $xs_max_height ) {
    visibility: visible !important;
    @include animation( none !important);
  }
}

.no-mutationobserver .wow {
  visibility: visible !important;
  @include animation( none !important);
}


/*======================================
=            Screen Readers            =
======================================*/
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0,0,0,0);
  border: 0;
}

/*===============================
=            Spinner            =
===============================*/
.css-loader {
  border-radius: 50%;
  width: 30px;
  height: 30px;
  position: relative;
  border-style: solid;
  border-width: 5px;
  border-color: rgba(#000, 0.2);
  border-left-color: #000;
  @include animation( rotate360 1.1s infinite linear );
}
@include keyframes( rotate360 ) {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}

.spinner {
  visibility: hidden;
  opacity: 0;
  margin: 0 auto;
  width: 70px;
  text-align: center;
  @include transition( opacity .2s );
  &.js-active {
    visibility: visible;
    opacity: 1;
  }
}

.spinner > div {
  width: 18px;
  height: 18px;
  background-color: #333;
  border-radius: 100%;
  display: inline-block;
  @include animation( bounceDelay 1.4s infinite ease-in-out both );
}

.spinner .bounce1 {
  @include animation-delay( -0.32s );
}

.spinner .bounce2 {
  @include animation-delay( -0.16s );
}

@include keyframes( bounceDelay ) {
  0%, 80%, 100% {
    -webkit-transform: scale(0);
    transform: scale(0);
  } 40% {
    -webkit-transform: scale(1.0);
    transform: scale(1.0);
  }
}
