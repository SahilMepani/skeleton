@use 'sass:math';
@use 'sass:list';
@use 'sass:map';

// Rem Calculation of Pixel Values
$rem-base: 16px;

@function strip-unit($number) {
	@if type-of($number) == "number" and not unitless($number) {
		@return math.div($number, ($number * 0 + 1));
	}

	@return $number;
}

@function convert-to-rem($value, $base-value: $rem-base, $limit: true) {
	@if abs($value) < 8 and $limit {
		@return $value * 1px;
	}

	$value: math.div(strip-unit($value), strip-unit($base-value)) * 1rem;

	@return $value;
}

@function rem-calc($values, $limit: true, $base-value: $rem-base) {
	$max: list.length($values);

	@if $max == 1 {
		@return convert-to-rem(nth($values, 1), $base-value, $limit);
	}

	$rem-values: ();

	@for $i from 1 through $max {
		$rem-values: list.append(
			$rem-values,
			convert-to-rem(list.nth($values, $i), $base-value)
		);
	}

	@return $rem-values;
}

@function fluid(
	$min-value,
	$max-value,
	$min-breakpoint: "ph",
	$max-breakpoint: "xxl"
) {
	@if $min-value == 0 {
		$min-value: 0.001;
	}

	@if $max-value == 0 {
		$max-value: 0.001;
	}

	$min-vw: 0;
	$max-vw: 0;

	@if map-has-key($grid-breakpoints, $min-breakpoint) {
		$min-vw: map.get($grid-breakpoints, $min-breakpoint);
	} @else {
		$min-vw: calc($min-breakpoint / $rem-base) * 1rem;
	}

	@if map-has-key($grid-breakpoints, $max-breakpoint) {
		$max-vw: map.get($grid-breakpoints, $max-breakpoint);
	} @else {
		$max-vw: calc($max-breakpoint / $rem-base) * 1rem;
	}

	$base-min-value: rem-calc($min-value, false);
	$base-max-value: rem-calc($max-value, false);
	$u1: math.unit($min-vw);
	$u2: math.unit($max-vw);
	$u3: math.unit($base-min-value);
	$u4: math.unit($base-max-value);

	@if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
		$fluid-base: calc(
			#{$base-min-value} +
				#{(strip-unit($base-max-value) - strip-unit($base-min-value))} *
				((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
		);

		@if $min-value < $max-value {
			@return min($fluid-base, rem-calc($max-value));
		} @else {
			@return clamp(
				rem-calc($max-value),
				$fluid-base,
				rem-calc($min-value)
			);
		}
	} @else {
		@error 'Invalid fluid() declaration.';
		@return 0;
	}
}
